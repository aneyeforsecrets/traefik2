version: "3.7"

########################### NETWORKS
networks:
  t2_proxy:
    external:
      name: t2_proxy
  backend:
  default:
    driver: bridge

########################### VOLUMES
volumes:
  organizr_config:
  portainer_data:
  unifi_config:
  nextcloud-db_data:
  nextcloud:
  nextcloud_config:
  nextcloud_apps:
  netbox-static-files:
    driver: local
  netbox-nginx-config:
    driver: local
  netbox-media-files:
    driver: local
  netbox-postgres-data:
    driver: local
  netbox-redis-data:
    driver: local


########################### SERVICES
services:
  # All services / apps go below this line
  ouroboros:
    container_name: ouroboros
    hostname: ouroboros
    image: pyouroboros/ouroboros
    environment:
      - CLEANUP=true
      - INTERVAL=300
      - LOG_LEVEL=info
      - SELF_UPDATE=true
      - IGNORE=mongo influxdb postgres mariadb
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    restart: unless-stopped
    networks:
    - backend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      
  # Traefik 2 - Reverse Proxy
  traefik:
    container_name: traefik
    image: traefik:chevrotin # the chevrotin tag refers to v2.2.x
    restart: unless-stopped
    command: # CLI arguments
      # --configFile=$USERDIR/traefik2/traefik.toml

      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false

      ########################### Entrypoints
      - --entryPoints.http.address=:80 # HTTP
      - --entryPoints.https.address=:443 # HTTPS
      - --entryPoints.api.address=:8888 # Dashboard/API

      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME

        # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22

      ########################### API
      - --api=true
      - --serversTransport.insecureSkipVerify=true
      - --log=true
      # - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      # - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499

      ########################### Providers
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=t2_proxy
      - --providers.docker.swarmMode=false

      ########################### Additional Configuratino File Paths
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder

      ########################### Certificate Resolution
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.dnschallenge=true
      - --certificatesResolvers.dns-cloudflare.acme.dnschallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      t2_proxy:
        ipv4_address: 192.168.40.254 # You can specify a static IP
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8888
        published: 8888
        protocol: tcp
        mode: host
    volumes:
      # Access to rules such as middleware
      - $USERDIR/docker/traefik2/rules:/rules
      # Access to the docker API so it can listen to events
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      # Access to the acme.json file for Let's Encrypt
      - type: bind
        source: $USERDIR/docker/traefik2/acme/acme.json
        target: /acme.json
      # Exposing the logging file
      - type: bind
        source: $USERDIR/docker/traefik2/traefik.log
        target: /traefik.log
      # Access to shared environment files
      - $USERDIR/docker/shared:/shared
    env_file:
      - $USERDIR/docker/traefik2/traefik2.env
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      ########################### Entrypoint
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      ########################### Rules
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      ########################### TLS Settings
      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      ########################### Middleware
      - "traefik.http.routers.traefik-rtr.middlewares=middlewares-rate-limit@file,middlewares-basic-auth@file"
      ########################### Service
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      - "traefik.http.services.traefik-rtr.loadbalancer.server.port=8080"

  # Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock
    networks:
      - t2_proxy
    security_opt:
      - no-new-privileges:true
    #    ports:
    #      - "$PORTAINER_PORT:9000"
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        read_only: true
      - type: volume
        source: portainer_data
        target: /data
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      ########################### Entrypoint
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      ########################### Rules

      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      ########################### TLS Settings
      - "traefik.http.routers.portainer-rtr.tls=true"
      - "traefik.http.routers.portainer-rtr.tls.certresolver=dns-cloudflare"
      ########################### Middleware
      - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file" # No Authentication
      ########################### Service
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # Unifi AP Controller
  unifi:
    container_name: unifi
    hostname: wlc01.odd
    image: linuxserver/unifi-controller:latest
    restart: always
    networks:
      - t2_proxy
    volumes:
      - type: volume
        source: unifi_config
        target: /config
      - type: bind
        source: ${USERDIR}/docker/shared
        target: /shared
    ports:
      - target: 3478
        published: 3478
        protocol: udp
        mode: host
      - target: 10001
        published: 10001
        protocol: udp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
      - target: 8081
        published: 8081
        protocol: tcp
        mode: host
      # - target: 8443
      #   published: 8443
      #   protocol: tcp
      #   mode: host
      - target: 8880
        published: 8880
        protocol: tcp
        mode: host
      - target: 6789
        published: 6789
        protocol: tcp
        mode: host
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    labels:
      - "traefik.enable=true"
      ########################### Entrypoint
      - "traefik.http.routers.unifi-rtr.entrypoints=https"
      ########################### Rules
      - "traefik.http.routers.unifi-rtr.rule=Host(`wlc01.odd.$DOMAINNAME`)"
      ########################### TLS Settings
      - "traefik.http.routers.unifi-rtr.tls=true"
      - "traefik.http.routers.unifi-rtr.tls.certresolver=dns-cloudflare"
      ########################### Middleware
      - "traefik.http.routers.unifi-rtr.middlewares=chain-no-auth@file" # No Authentication
      ########################### Service
      - "traefik.http.routers.unifi-rtr.service=unifi-svc"
      - "traefik.http.services.unifi-svc.loadbalancer.server.scheme=https"
      - "traefik.http.services.unifi-svc.loadbalancer.server.port=8443"


  nextcloud-db:
    container_name: nextcloud-db
    image: postgres:alpine
    restart: always
    #command:
    #  - -c 'config_file=/etc/postgresql/postgresql.conf'
    networks:
      - backend
    volumes:
      - type: volume
        source: nextcloud-db_data
        target: /var/lib/postgresql/data
      - type: bind
        source: $USERDIR/docker/nextcloud/postgresql.conf
        target: /etc/postgresql/postgresql.conf
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - $USERDIR/docker/nextcloud/nextcloud-db.env
    environment:
      - PUID=$PUID
      - PGID=$PGID
  nextcloud-redis:
    container_name: nextcloud-redis
    image: redis:5-alpine
    restart: always
    networks:
      - backend
  nextcloud-cron:
    container_name: nextcloud-cron
    image: nextcloud:apache
    restart: always
    networks:
      - backend
    volumes:
      - type: volume
        source: nextcloud
        target: /var/www/html
      - type: volume
        source: nextcloud_apps
        target: /var/www/html/custom_apps
      - type: volume
        source: nextcloud_config
        target: /var/www/html/config
      - type: bind
        source: $USERDIR/docker/nextcloud/data/
        target: /var/www/html/data
      # - type: bind
      #   source: $USERDIR/docker/nextcloud/.htaccess
      #   target: /var/www/html/.htaccess
      - type: bind
        source: $USERDIR/docker/nextcloud/crontabs/www-data
        target: /var/spool/cron/crontabs/www-data
    entrypoint: /cron.sh
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
    depends_on:
      - nextcloud-db
      - nextcloud-redis
  nextcloud:
    container_name: nextcloud
    hostname: nextcloud
    domainname: dir.li
    image: nextcloud:apache
    restart: always
    networks:
      - backend
      - t2_proxy
    # links:
    #   - nextcloud-db
    volumes:
      - type: volume
        source: nextcloud
        target: /var/www/html
      - type: volume
        source: nextcloud_apps
        target: /var/www/html/custom_apps
      - type: volume
        source: nextcloud_config
        target: /var/www/html/config
      - type: bind
        source: $USERDIR/docker/nextcloud/data/
        target: /var/www/html/data
      # - type: bind
      #   source: $USERDIR/docker/nextcloud/.htaccess
      #   target: /var/www/html/.htaccess
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SMTP_NAME=$SMTP_NAME
      - SMTP_PASSWORD=$SMTP_PASSWORD
    labels:
      - "traefik.enable=true"
      ##################### HTTPS
      ########################### Entrypoint
      - "traefik.http.routers.nextcloud-https.entrypoints=https"
      ########################### Rules
      - "traefik.http.routers.nextcloud-https.rule=Host(`nextcloud.$DOMAINNAME`)"
      ########################### TLS Settings
      - "traefik.http.routers.nextcloud-https.tls=true"
      - "traefik.http.routers.nextcloud-https.tls.certresolver=dns-cloudflare"
      ########################### Middleware
      - "traefik.http.routers.nextcloud-https.middlewares=nextcloud-caldav@docker,chain-no-auth@file"
      - "traefik.http.middlewares.nextcloud-caldav.redirectregex.permanent=true"
      - "traefik.http.middlewares.nextcloud-caldav.redirectregex.regex=^https://(.*)/.well-known/(card|cal)dav"
      - "traefik.http.middlewares.nextcloud-caldav.redirectregex.replacement=https://$${1}/remote.php/dav/"
      ########################### Service
      - "traefik.http.routers.nextcloud-https.service=nextcloud-svc"
      - "traefik.http.services.nextcloud-svc.loadbalancer.server.scheme=http"
      - "traefik.http.services.nextcloud-svc.loadbalancer.server.port=80"
    # env_file:
    #   - db.env
    depends_on:
      - nextcloud-db
      - nextcloud-redis

  librenms_db:
    image: mariadb:latest
    container_name: librenms_db
    command:
      - "mysqld"
      # - "--sql-mode="
      - "--innodb-file-per-table=1"
      - "--lower-case-table-names=0"
      - "--character-set-server=utf8"
      - "--collation-server=utf8_unicode_ci"
    volumes:
      - "./librenms/librenms_db:/var/lib/mysql"
    networks:
      - backend
    env_file:
      - $USERDIR/docker/librenms/librenms.env
    restart: always

  librenms_memcached:
    image: memcached:alpine
    container_name: librenms_memcached
    networks:
      - backend
    environment:
      - "TZ=${TZ}"
    restart: always

  librenms_redis:
    image: redis:5.0-alpine
    container_name: librenms_redis
    environment:
      - "TZ=${TZ}"
    restart: always

  librenms_rrdcached:
    image: crazymax/rrdcached
    container_name: librenms_rrdcached
    volumes:
      - "/media/iscsi/librenms:/data/db"
      - "./librenms/rrd/rrd-journal:/data/journal"
    networks:
      - backend
    environment:
      - "TZ=${TZ}"
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "LOG_LEVEL=LOG_INFO"
      - "WRITE_TIMEOUT=1800"
      - "WRITE_JITTER=1800"
      - "WRITE_THREADS=4"
      - "FLUSH_DEAD_DATA_INTERVAL=3600"
    restart: always

  librenms_msmtpd:
    image: crazymax/msmtpd:latest
    container_name: librenms_msmtpd
    env_file:
      - "$USERDIR/docker/librenms/msmtpd.env"
    restart: always

  librenms:
    image: librenms/librenms:latest
    container_name: librenms
    domainname: dir.li
    hostname: librenms
    depends_on:
      - librenms_db
      - librenms_memcached
      - librenms_rrdcached
      - librenms_msmtpd
    volumes:
      - "/media/iscsi/librenms:/data"
    networks:
      - backend
      - t2_proxy
    env_file:
      - $USERDIR/docker/librenms/librenms.env
    restart: always
    labels:
      - "traefik.enable=true"
      ##################### HTTPS
      ########################### Entrypoint
      - "traefik.http.routers.librenms-https.entrypoints=https"
      ########################### Rules
      - "traefik.http.routers.librenms-https.rule=Host(`librenms.$DOMAINNAME`)"
      ########################### TLS Settings
      - "traefik.http.routers.librenms-https.tls=true"
      - "traefik.http.routers.librenms-https.tls.certresolver=dns-cloudflare"
      ########################### Middleware
      - "traefik.http.routers.librenms-https.middlewares=chain-no-auth@file"
      ########################### Service
      - "traefik.http.routers.librenms-https.service=librenms-svc"
      - "traefik.http.services.librenms-svc.loadbalancer.server.scheme=http"
      - "traefik.http.services.librenms-svc.loadbalancer.server.port=8000"

  librenms_dispatcher:
    image: librenms/librenms:latest
    container_name: librenms_dispatcher
    domainname: dir.li
    hostname: librenms_dispatcher
    depends_on:
      - librenms
      - librenms_redis
    volumes:
      - "/media/iscsi/librenms:/data"
    networks:
      - backend
    env_file:
      - $USERDIR/docker/librenms/librenms.env
    environment:
      - "DISPATCHER_NODE_ID=dispatcher1"
      - "REDIS_HOST=librenms_redis"
      - "REDIS_PORT=6379"
      - "REDIS_DB=0"
      - "SIDECAR_DISPATCHER=1"
    restart: always